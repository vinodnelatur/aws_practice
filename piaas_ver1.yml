Parameters:
    KeyPair:
      Description: Use this keypair to SSH into the instances
      Type: AWS::EC2::KeyPair::KeyName
Resources:
    MyVpc:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsSupport: True
        EnableDnsHostnames: True
    InternetGateway:
       Type: AWS::EC2::InternetGateway
       Properties:
        Tags:
         - Key: Application
           Value: !Ref 'AWS::StackId'
         - Key: Name
           Value: revolutionit_VPC
    Subnet1:
      Type: AWS::EC2::Subnet
      Description: Create Subnet1 for placing EC2 server
      Properties:
        VpcId: !Ref MyVpc
        CidrBlock: 10.0.1.0/24
        AvailabilityZone: "ap-southeast-2a"
        Tags:
         - Key: "Cloudformation StackId"
           Value: !Ref 'AWS::StackId'
         - Key: Name
           Value: Subnet1
    AttachGateway:
       Type: AWS::EC2::VPCGatewayAttachment
       Properties:
        VpcId: !Ref MyVpc
        InternetGatewayId: !Ref InternetGateway
    RouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref MyVpc
        Tags:
         - Key: Application
           Value: !Ref "AWS::StackId"
    Route:
      Type: AWS::EC2::Route
      DependsOn: "AttachGateway"
      Properties:
        RouteTableId: !Ref RouteTable
        DestinationCidrBlock: "0.0.0.0/0"
        GatewayId: !Ref InternetGateway
    SubnetRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref Subnet1
        RouteTableId: !Ref RouteTable
    NetworkAcl:
      Type: AWS::EC2::NetworkAcl
      Properties:
        VpcId: !Ref MyVpc
        Tags:
         - Key: Application
           Value: !Ref "AWS::StackId"
    HTTPNetworkAclEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
       NetworkAclId: !Ref NetworkAcl
       RuleNumber: '100'
       Protocol: "6"
       RuleAction: allow
       Egress: 'false'  # Allowing HTTP ibound and outbound traffic
       CidrBlock: 0.0.0.0/0
       PortRange:
        From: '80'
        To: '80'
    SSHNetworkAclEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
       NetworkAclId: !Ref NetworkAcl
       RuleNumber: '101'
       Protocol: "6"
       RuleAction: allow
       Egress: 'false'  # Allowing SSH ibound and outbound traffic
       CidrBlock: 0.0.0.0/0
       PortRange:
        From: '22'
        To: '22'
    HTTPNetworkAclExit:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
       NetworkAclId: !Ref NetworkAcl
       RuleNumber: '100'
       Protocol: "6"
       RuleAction: allow
       Egress: 'true'  # Allowing HTTP ibound and outbound traffic
       CidrBlock: 0.0.0.0/0
       PortRange:
        From: '80'
        To: '80'
    SSHNetworkAclExit:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
       NetworkAclId: !Ref NetworkAcl
       RuleNumber: '101'
       Protocol: "6"
       RuleAction: allow
       Egress: 'true'  # Allowing SSH ibound and outbound traffic
       CidrBlock: 0.0.0.0/0
       PortRange:
        From: '22'
        To: '22'
    SubnetNetworkAclAssociation:
       Type: AWS::EC2::SubnetNetworkAclAssociation
       Properties:
         SubnetId: !Ref Subnet1
         NetworkAclId: !Ref NetworkAcl
    EIP:
      Type: AWS::EC2::EIP
      DependsOn: "AttachGateway"
      Properties:
        Domain: "MyVpc"
    InstanceSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http & ssh to client host
        VpcId: !Ref MyVpc
        SecurityGroupIngress:
           - IpProtocol: tcp
             FromPort: 80
             ToPort: 80
             CidrIp: 0.0.0.0/0
           - IpProtocol: tcp
             FromPort: 22
             ToPort: 22
             CidrIp: 0.0.0.0/0
           - IpProtocol: tcp
             FromPort: 8080
             ToPort: 8080
             CidrIp: 0.0.0.0/0
           - IpProtocol: tcp
             FromPort: 9990
             ToPort: 9990
             CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
           - IpProtocol: tcp
             FromPort: 80
             ToPort: 80
             CidrIp: 0.0.0.0/0
           - IpProtocol: tcp
             FromPort: 22
             ToPort: 22
             CidrIp: 0.0.0.0/0
           - IpProtocol: tcp
             FromPort: 8080
             ToPort: 8080
             CidrIp: 0.0.0.0/0
           - IpProtocol: tcp
             FromPort: 9990
             ToPort: 9990
             CidrIp: 0.0.0.0/0
    Ec2Instance:
     Type: 'AWS::EC2::Instance'
     Properties:
      InstanceType: t2.micro
      ImageId: ami-67589505 # RHEL 7 AMI in Sydney
      KeyName: !Ref KeyPair
      SecurityGroupIds:
       - !Ref InstanceSecurityGroup
      SubnetId: !Ref Subnet1
      Tags:
        - Key: "Instance Region"
          Value: !Ref AWS::Region
        - Key: "Name"
          Value: "Ansible-Control-Server"
      UserData:
          Fn::Base64:
            !Sub |
                #!/bin/bash -xe
                #Ensure AWS CFN Bootstrap is the latest
                sudo yum install -y unzip
                curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
                unzip awscli-bundle.zip
                sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
                #Install Packages
                sudo rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
                #Install PIP
                sudo curl "https://bootstrap.pypa.io/get-pip.py" -o "get-pip.py"
                python get-pip.py
                #sudo pip install --upgrade pip
                #Additional boto package
                sudo pip install boto
                sudo pip install boto3
                #Install Ansible
                yum -y install ansible
                #setting ansible permission for directories
                sudo chmod 777 -R /etc/ansible
                #Install Roles 
                ansible-galaxy install geerlingguy.jenkins --roles-path=/etc/ansible/roles
                #append hosts into the file to start the ansible script
                sed -i '$ a \[local]\nlocalhost\n[jenkins]\n\n [bamboo]' hosts
                #Need to copy the ansible playbook
                #Start Jenkins installation
                #/usr/bin/ansible-playbook -i /etc/ansible/hosts /etc/ansible/ansible-jenkins.yml --vvv
                #Install Bamboo
                ansible-galaxy install arjunkapur95.bamboorolecicd --roles-path=/etc/ansible/roles                
    EIPAssociation:
      Type: AWS::EC2::EIPAssociation
      Properties:
        AllocationId: !GetAtt EIP.AllocationId
        InstanceId: !Ref Ec2Instance
Outputs:
  EC2Instance:
    Description: The public DNS name for the EC2 instance
    Value: !GetAtt 'Ec2Instance.PublicDnsName'
    