Parameters:
    KeyPair:
      Description: Use this keypair to SSH into the instances
      Type: AWS::EC2::KeyPair::KeyName
Resources:
    MyVpc:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsSupport: True
        EnableDnsHostnames: True
    InternetGateway:
       Type: AWS::EC2::InternetGateway
       Properties:
        Tags:
         - Key: Application
           Value: !Ref 'AWS::StackId'
    Subnet1:
      Type: AWS::EC2::Subnet
      Description: Create Subnet1 for placing EC2 server
      Properties:
        VpcId: !Ref MyVpc
        CidrBlock: 10.0.1.0/24
        AvailabilityZone: "ap-southeast-2a"
        Tags:
         - Key: "Cloudformation StackId"
           Value: !Ref 'AWS::StackId'
#    Subnet2:
#      Type: AWS::EC2::Subnet
#      Description: Create Subnet2 for placing EC2 server2
#      Properties:
#        VpcId: !Ref MyVpc
#        CidrBlock: 10.0.2.0/24
#        AvailabilityZone: "ap-southeast-2b"
#        Tags:
#          Keys: Application
#          Value: !Ref "AWS::StackId"
#    Subnet3:
#      Type: AWS::EC2::Subnet
#      Description: Create Subnet3 to have the ELB and other systems which are internet facing
#      Properties:
#        VpcId: !Ref MyVpc
#        CidrBlock: 10.0.3.0/24
#        AvailabilityZone: "ap-southeast-2a"
#        Tags:
#         Keys: Application
#         Value: !Ref "AWS::StackId"
    AttachGateway:
       Type: AWS::EC2::VPCGatewayAttachment
       Properties:
        VpcId: !Ref MyVpc
        InternetGatewayId: !Ref InternetGateway
    RouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref MyVpc
        Tags:
         - Key: Application
           Value: !Ref "AWS::StackId"
    Route:
      Type: AWS::EC2::Route
      DependsOn: "AttachGateway"
      Properties:
        RouteTableId: !Ref RouteTable
        DestinationCidrBlock: "0.0.0.0/0"
        GatewayId: !Ref InternetGateway
    SubnetRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref Subnet1
        RouteTableId: !Ref RouteTable
    NetworkAcl:
      Type: AWS::EC2::NetworkAcl
      Properties:
        VpcId: !Ref MyVpc
        Tags:
         - Key: Application
           Value: !Ref "AWS::StackId"
    HTTPNetworkAclEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
       NetworkAclId: !Ref NetworkAcl
       RuleNumber: '100'
       Protocol: "6"
       RuleAction: allow
       Egress: 'false'  # Allowing HTTP ibound and outbound traffic
       CidrBlock: 10.0.0.0/16
       PortRange:
        From: '80'
        To: '80'
    SSHNetworkAclEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
       NetworkAclId: !Ref NetworkAcl
       RuleNumber: '101'
       Protocol: "6"
       RuleAction: allow
       Egress: 'false'  # Allowing SSH ibound and outbound traffic
       CidrBlock: 10.0.0.0/16
       PortRange:
        From: '22'
        To: '22'
    HTTPNetworkAclEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
       NetworkAclId: !Ref NetworkAcl
       RuleNumber: '100'
       Protocol: "6"
       RuleAction: allow
       Egress: 'true'  # Allowing HTTP ibound and outbound traffic
       CidrBlock: 10.0.0.0/16
       PortRange:
        From: '80'
        To: '80'
    SSHNetworkAclEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
       NetworkAclId: !Ref NetworkAcl
       RuleNumber: '101'
       Protocol: "6"
       RuleAction: allow
       Egress: 'true'  # Allowing SSH ibound and outbound traffic
       CidrBlock: 10.0.0.0/16
       PortRange:
        From: '22'
        To: '22'
    SubnetNetworkAclAssociation:
       Type: AWS::EC2::SubnetNetworkAclAssociation
       Properties:
         SubnetId: !Ref Subnet1
         NetworkAclId: !Ref NetworkAcl
#   HTTPSNetworkAclEntry:
#      Type: AWS::EC2::NetworkAclEntry
#      Properties:
#       NetworkAclId: !Ref NetworkAcl
#       RuleNumber: '102'
#       Protocol: "6"
#       RuleAction: allow
#       Egress: 'true'  # Allowing HTTPS ibound and outbound traffic
#       CidrBlock: 10.0.0.0/16
#       PortRange:
#        From: '443'
#        To: '443'
#    EIP:
#      Type: AWS::EC2::EIP
#      DependsOn: "AttachGateway"
#      Properties:
#        Domain: "MyVpc"
#       InstanceId: !Ref Ec2Instance
    InstanceSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http & ssh to client host
        VpcId: !Ref MyVpc
        SecurityGroupIngress:
           - IpProtocol: tcp
             FromPort: 80
             ToPort: 80
             CidrIp: 10.0.0.0/16
           - IpProtocol: tcp
             FromPort: 22
             ToPort: 22
             CidrBlock: 10.0.0.0/16
        SecurityGroupEgress:
           - IpProtocol: tcp
             FromPort: 80
             ToPort: 80
             CidrIp: 10.0.0.0/16
           - IpProtocol: tcp
             FromPort: 22
             ToPort: 22
             CidrBlock: 10.0.0.0/16
    Ec2Instance:
     Type: 'AWS::EC2::Instance'
#     DependsOn: "AttachGateway"
     Properties:
      InstanceType: t2.micro
      ImageId: ami-087b02d91ef88c598 # Amazon Linux AMI in Sydney
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      SubnetId: !Ref Subnet1
      Tags:
        - Key: "Name"
          Value: !Ref Ec2Instance

Outputs:
  EC2Instance:
    Description: The public DNS name for the EC2 instance
#   Value: !GetAtt 'Ec2Instance.PublicDnsName'


